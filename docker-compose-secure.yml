version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: exchange_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME_FILE: /run/secrets/mongo_root_username
      MONGO_INITDB_ROOT_PASSWORD_FILE: /run/secrets/mongo_root_password
      MONGO_INITDB_DATABASE: exchange_platform
    # **اصلاح شده**: پورت‌های عمومی حذف شدند
    expose:
      - "27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - exchange_network
    secrets:
      - mongo_root_username
      - mongo_root_password
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: exchange_redis
    restart: unless-stopped
    # **اصلاح شده**: پورت عمومی حذف شد
    expose:
      - "6379"
    volumes:
      - redis_data:/data
    networks:
      - exchange_network
    # **اصلاح شده**: اضافه کردن password
    command: redis-server --requirepass $(cat /run/secrets/redis_password)
    secrets:
      - redis_password
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "$(cat /run/secrets/redis_password)", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: exchange_backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      # **اصلاح شده**: استفاده از secrets
      MONGODB_URI: mongodb://$(cat /run/secrets/mongo_root_username):$(cat /run/secrets/mongo_root_password)@mongodb:27017/exchange_platform?authSource=admin
      REDIS_URL: redis://:$(cat /run/secrets/redis_password)@redis:6379
      JWT_SECRET_FILE: /run/secrets/jwt_secret
      JWT_REFRESH_SECRET_FILE: /run/secrets/jwt_refresh_secret
      SESSION_SECRET_FILE: /run/secrets/session_secret
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3000}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      UPLOAD_PATH: /app/uploads
      LOG_LEVEL: info
      # **اصلاح شده**: اضافه کردن security headers
      FORCE_HTTPS: "true"
      TRUST_PROXY: "true"
    ports:
      - "5000:5000"
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - exchange_network
    secrets:
      - mongo_root_username
      - mongo_root_password
      - redis_password
      - jwt_secret
      - jwt_refresh_secret
      - session_secret
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    # **اصلاح شده**: اضافه کردن security context
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: exchange_frontend
    restart: unless-stopped
    environment:
      VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://localhost:5000}
      VITE_SOCKET_URL: ${VITE_SOCKET_URL:-http://localhost:5000}
      VITE_APP_NAME: ${VITE_APP_NAME:-پلتفرم صرافی}
      VITE_APP_VERSION: ${VITE_APP_VERSION:-1.0.0}
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - exchange_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    # **اصلاح شده**: اضافه کردن security context
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: exchange_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - exchange_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # **اصلاح شده**: MongoDB Express فقط در development
  # mongo-express:
  #   profiles: ["development"]
  #   image: mongo-express:latest
  #   container_name: exchange_mongo_express
  #   restart: unless-stopped
  #   environment:
  #     ME_CONFIG_MONGODB_ADMINUSERNAME_FILE: /run/secrets/mongo_root_username
  #     ME_CONFIG_MONGODB_ADMINPASSWORD_FILE: /run/secrets/mongo_root_password
  #     ME_CONFIG_MONGODB_URL: mongodb://$(cat /run/secrets/mongo_root_username):$(cat /run/secrets/mongo_root_password)@mongodb:27017/
  #     ME_CONFIG_BASICAUTH_USERNAME: admin
  #     ME_CONFIG_BASICAUTH_PASSWORD_FILE: /run/secrets/mongo_express_password
  #   expose:
  #     - "8081"
  #   depends_on:
  #     mongodb:
  #       condition: service_healthy
  #   networks:
  #     - exchange_network
  #   secrets:
  #     - mongo_root_username
  #     - mongo_root_password
  #     - mongo_express_password

  # **اصلاح شده**: Redis Commander فقط در development
  # redis-commander:
  #   profiles: ["development"]
  #   image: rediscommander/redis-commander:latest
  #   container_name: exchange_redis_commander
  #   restart: unless-stopped
  #   environment:
  #     REDIS_HOSTS: local:redis:6379
  #     REDIS_PASSWORD_FILE: /run/secrets/redis_password
  #   expose:
  #     - "8081"
  #   depends_on:
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - exchange_network
  #   secrets:
  #     - redis_password

  # Backup Service
  backup:
    image: mongo:6.0
    container_name: exchange_backup
    restart: "no"
    environment:
      MONGO_INITDB_ROOT_USERNAME_FILE: /run/secrets/mongo_root_username
      MONGO_INITDB_ROOT_PASSWORD_FILE: /run/secrets/mongo_root_password
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - exchange_network
    secrets:
      - mongo_root_username
      - mongo_root_password
    command: ["/backup.sh"]

  # **اصلاح شده**: Monitoring with proper versions
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: exchange_prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    expose:
      - "9090"
    depends_on:
      - backend
    networks:
      - exchange_network
    security_opt:
      - no-new-privileges:true
    user: "nobody"

  grafana:
    image: grafana/grafana:10.0.0
    container_name: exchange_grafana
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD_FILE: /run/secrets/grafana_admin_password
    expose:
      - "3000"
    depends_on:
      - prometheus
    networks:
      - exchange_network
    secrets:
      - grafana_admin_password
    security_opt:
      - no-new-privileges:true
    user: "472"

  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: exchange_alertmanager
    restart: unless-stopped
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    expose:
      - "9093"
    depends_on:
      - prometheus
    networks:
      - exchange_network
    security_opt:
      - no-new-privileges:true
    user: "nobody"

# **اصلاح شده**: Docker Secrets
secrets:
  mongo_root_username:
    file: ./secrets/mongo_root_username.txt
  mongo_root_password:
    file: ./secrets/mongo_root_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  jwt_refresh_secret:
    file: ./secrets/jwt_refresh_secret.txt
  session_secret:
    file: ./secrets/session_secret.txt
  grafana_admin_password:
    file: ./secrets/grafana_admin_password.txt
  mongo_express_password:
    file: ./secrets/mongo_express_password.txt

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  exchange_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
