name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    name: 🔍 Lint and Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - run: npm ci
      - run: cd backend && npm ci
      - run: cd frontend && npm ci
      - run: cd backend && npm run lint
      - run: cd frontend && npm run lint
      - run: |
          cd backend && npx prettier --check "src/**/*.js"
          cd frontend && npx prettier --check "src/**/*.{js,jsx}"

  security:
    name: 🔐 Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - run: npm ci
      - run: cd backend && npm ci
      - run: cd frontend && npm ci
      - run: cd backend && npm audit --audit-level=moderate
        continue-on-error: true
      - run: cd frontend && npm audit --audit-level=moderate
        continue-on-error: true
      - uses: github/codeql-action/init@v3
        with:
          languages: javascript
      - uses: github/codeql-action/analyze@v3

  test-unit:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: test
        ports: [27017:27017]
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports: [6379:6379]
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - run: npm ci
      - run: cd backend && npm ci
      - run: cd frontend && npm ci
      - run: |
          cd backend
          cat > .env.test << EOF
          NODE_ENV=test
          JWT_SECRET=test-jwt-secret-for-testing-purposes-only
          JWT_REFRESH_SECRET=test-jwt-refresh-secret-for-testing-purposes-only
          SESSION_SECRET=test-session-secret-for-testing-purposes-only
          MONGODB_URI=mongodb://test:test@localhost:27017/exchange_test?authSource=admin
          REDIS_URL=redis://localhost:6379
          BCRYPT_ROUNDS=4
          EOF
      - run: cd backend && npm test -- --coverage --testPathPattern="unit"
        env:
          NODE_ENV: test
      - run: cd frontend && npm test -- --coverage --watchAll=false
        env:
          CI: true
      - uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
      - uses: codecov/codecov-action@v3
        with:
          files: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # ... سایر jobها مانند قبل

  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify on Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
