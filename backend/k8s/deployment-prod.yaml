apiVersion: apps/v1
kind: Deployment
metadata:
  name: exchange-platform-backend
  namespace: production
  labels:
    app: exchange-platform-backend
    version: v3.0.0
    environment: production
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: exchange-platform-backend
  template:
    metadata:
      labels:
        app: exchange-platform-backend
        version: v3.0.0
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: exchange-platform-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: backend
        image: exchange-platform-backend:3.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
        - containerPort: 3001
          name: metrics
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: exchange-platform-secrets
              key: db-host
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: exchange-platform-secrets
              key: db-name
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: exchange-platform-secrets
              key: db-user
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: exchange-platform-secrets
              key: db-password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: exchange-platform-secrets
              key: jwt-secret
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: exchange-platform-secrets
              key: redis-url
        - name: API_VERSION
          value: "v1"
        - name: LOG_LEVEL
          value: "info"
        - name: ENABLE_METRICS
          value: "true"
        - name: ENABLE_AUDIT_LOGS
          value: "true"
        - name: RATE_LIMIT_ENABLED
          value: "true"
        - name: RATE_LIMIT_WINDOW
          value: "900000"
        - name: RATE_LIMIT_MAX_REQUESTS
          value: "100"
        resources:
          requests:
            cpu: "500m"
            memory: "1Gi"
          limits:
            cpu: "2"
            memory: "4Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /startup
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: config
          mountPath: /app/config
          readOnly: true
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: logs
        emptyDir: {}
      - name: config
        configMap:
          name: exchange-platform-config
      nodeSelector:
        node-role: production
      tolerations:
      - key: "production"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - exchange-platform-backend
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: exchange-platform-backend-service
  namespace: production
  labels:
    app: exchange-platform-backend
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  - port: 3001
    targetPort: 3001
    protocol: TCP
    name: metrics
  selector:
    app: exchange-platform-backend
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: exchange-platform-ingress
  namespace: production
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - api.exchange-platform.com
    secretName: exchange-platform-tls
  rules:
  - host: api.exchange-platform.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: exchange-platform-backend-service
            port:
              number: 80
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: exchange-platform-backend-hpa
  namespace: production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: exchange-platform-backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: exchange-platform-config
  namespace: production
data:
  app.json: |
    {
      "name": "Exchange Platform v3",
      "version": "3.0.0",
      "environment": "production",
      "features": {
        "p2p": true,
        "remittance": true,
        "accounting": true,
        "reports": true,
        "audit": true,
        "metrics": true
      },
      "security": {
        "rateLimit": true,
        "cors": true,
        "helmet": true,
        "csrf": true
      },
      "database": {
        "poolSize": 20,
        "connectionTimeout": 10000,
        "idleTimeout": 30000
      },
      "redis": {
        "maxRetriesPerRequest": 3,
        "retryDelayOnFailover": 100
      }
    }
---
apiVersion: v1
kind: Secret
metadata:
  name: exchange-platform-secrets
  namespace: production
type: Opaque
data:
  db-host: <base64-encoded-db-host>
  db-name: <base64-encoded-db-name>
  db-user: <base64-encoded-db-user>
  db-password: <base64-encoded-db-password>
  jwt-secret: <base64-encoded-jwt-secret>
  redis-url: <base64-encoded-redis-url>
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: exchange-platform-sa
  namespace: production
secrets:
- name: exchange-platform-sa-token
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: exchange-platform-role
  namespace: production
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: exchange-platform-rolebinding
  namespace: production
subjects:
- kind: ServiceAccount
  name: exchange-platform-sa
  namespace: production
roleRef:
  kind: Role
  name: exchange-platform-role
  apiGroup: rbac.authorization.k8s.io 