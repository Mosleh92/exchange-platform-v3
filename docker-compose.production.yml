version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: exchange_mongodb_prod
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME_FILE: /run/secrets/mongo_root_username
      MONGO_INITDB_ROOT_PASSWORD_FILE: /run/secrets/mongo_root_password
      MONGO_INITDB_DATABASE: exchange_platform
    expose:
      - "27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - ./mongodb/mongod.conf:/etc/mongod.conf:ro
    networks:
      - exchange_network
    secrets:
      - mongo_root_username
      - mongo_root_password
    command: ["mongod", "--config", "/etc/mongod.conf"]
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.2'

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: exchange_redis_prod
    restart: unless-stopped
    expose:
      - "6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - exchange_network
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass $(cat /run/secrets/redis_password)
    secrets:
      - redis_password
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "$(cat /run/secrets/redis_password)", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: exchange_backend_prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://$(cat /run/secrets/mongo_root_username):$(cat /run/secrets/mongo_root_password)@mongodb:27017/exchange_platform?authSource=admin
      REDIS_URL: redis://:$(cat /run/secrets/redis_password)@redis:6379
      JWT_SECRET_FILE: /run/secrets/jwt_secret
      JWT_REFRESH_SECRET_FILE: /run/secrets/jwt_refresh_secret
      SESSION_SECRET_FILE: /run/secrets/session_secret
      UPLOAD_PATH: /app/uploads
      LOG_LEVEL: info
      TRUST_PROXY: "true"
      FORCE_HTTPS: "true"
    expose:
      - "5000"
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - exchange_network
    secrets:
      - mongo_root_username
      - mongo_root_password
      - redis_password
      - jwt_secret
      - jwt_refresh_secret
      - session_secret
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: exchange_frontend_prod
    restart: unless-stopped
    expose:
      - "80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - exchange_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Load Balancer (Nginx)
  nginx:
    image: nginx:alpine
    container_name: exchange_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/production.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
      - nginx_cache:/var/cache/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - exchange_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Backup Service
  backup:
    image: mongo:6.0
    container_name: exchange_backup_prod
    restart: "no"
    environment:
      MONGO_INITDB_ROOT_USERNAME_FILE: /run/secrets/mongo_root_username
      MONGO_INITDB_ROOT_PASSWORD_FILE: /run/secrets/mongo_root_password
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - exchange_network
    secrets:
      - mongo_root_username
      - mongo_root_password
    command: ["/backup.sh"]
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.2'

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: exchange_prometheus_prod
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    expose:
      - "9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    depends_on:
      - backend
    networks:
      - exchange_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:10.0.0
    container_name: exchange_grafana_prod
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      GF_SECURITY_ADMIN_PASSWORD_FILE: /run/secrets/grafana_admin_password
      GF_SECURITY_DISABLE_GRAVATAR: "true"
      GF_SECURITY_DISABLE_BRUTE_FORCE_LOGIN_PROTECTION: "false"
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource"
    expose:
      - "3000"
    depends_on:
      - prometheus
    networks:
      - exchange_network
    secrets:
      - grafana_admin_password
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Log Management - Loki
  loki:
    image: grafana/loki:2.9.0
    container_name: exchange_loki_prod
    restart: unless-stopped
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    expose:
      - "3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - exchange_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'

# Docker Secrets
secrets:
  mongo_root_username:
    file: ./secrets/mongo_root_username.txt
  mongo_root_password:
    file: ./secrets/mongo_root_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  jwt_refresh_secret:
    file: ./secrets/jwt_refresh_secret.txt
  session_secret:
    file: ./secrets/session_secret.txt
  grafana_admin_password:
    file: ./secrets/grafana_admin_password.txt

# Volumes
volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  nginx_cache:
    driver: local

# Networks
networks:
  exchange_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
